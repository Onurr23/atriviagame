{"version":3,"sources":["Redux/Actions/QuestionActions.js","Redux/Actions/CategoryActions.js","Redux/Actions/TimerActions.js","Redux/Actions/PointActions.js","Components/Home.js","Redux/Actions/JokerActions.js","Redux/Actions/RandomActions.js","Components/Questions.js","Components/CorrectAnswer.js","Components/IncorrectAnswer.js","Components/Navi.js","Components/GameFinished.js","App.js","Redux/Reducers/CentralStore.js","Redux/Reducers/QuestionReducers.js","Redux/Reducers/NumberReducer.js","Redux/Reducers/PointReducer.js","Redux/Reducers/JokerReducer.js","Redux/Reducers/CounterReducer.js","Redux/Reducers/CategoryReducer.js","Redux/Reducers/TimeReducer.js","Redux/Reducers/MessageReducer.js","Redux/Reducers/RandomReducer.js","Redux/Reducers/rootReducer.js","index.js"],"names":["getQuestions","difficulty","category","dispatch","url","axios","get","then","response","type","payload","data","results","passQuestion","restart","setMessage","msg","resetNumber","getCategories","trivia_categories","setTimer","sn","restartTime","SetPoint","point","resetPoint","Home","state","isStopped","stopAnimation","setTimeout","setState","changeHandler","e","props","target","value","this","categories","message","setTime","setPoint","resetNum","defaultOptions","loop","autoplay","animationData","correct","rendererSettings","preserveAspectRatio","gotCategories","rendered","className","options","height","width","isPaused","name","id","onChange","map","key","to","pathname","questions","Component","connect","QuestionReducers","CategoryReducer","bindActionCreators","useJoker","incorrect","console","log","decreaseCounter","resetCounter","randomize","array","Questions","myTimer","random","newCorrect","location","number","correct_answer","newIncorrect","incorrect_answers","newTotal","answer","clearInterval","reset","pass","set","time","history","push","round","timer","setInterval","div","length","news","splice","split","decrease","timeIsUp","undefined","current","question","randomla","onClick","counter","PureComponent","NumberReducer","PointReducer","usedJoker","JokerReducer","CounterReducer","TimerReducer","MessageReducer","jok","RandomReducer","joker","CorrectAnswer","back","goBack","IncorrectAnswer","previous","increase","Navi","GameFinished","over","App","exact","path","component","eliminated","jokerCount","randomized","CentralStore","action","sort","a","b","Math","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09d5e3fb.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport function getQuestions(difficulty,category) {\r\n\r\n    return(dispatch)=>{\r\n\r\n\r\n        let url;\r\n\r\n        if(difficulty){\r\n\r\n\r\n            url = 'https://opentdb.com/api.php?amount=10&category='+category+'&difficulty='+difficulty+'&type=multiple'\r\n\r\n        }else {\r\n\r\n            url  = 'https://opentdb.com/api.php?amount=10&category'+category+'&difficulty=hard&type=multiple'\r\n\r\n        }\r\n\r\n        axios.get(url).then(response=>{\r\n\r\n            dispatch({type : 'QUESTIONS', payload : response.data.results})\r\n\r\n        })\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\nexport function passQuestion() {\r\n\r\n    return({type : 'PASSED', payload : 1})\r\n\r\n}\r\n\r\nexport function restart() {\r\n\r\n    return({type : 'RESTART',payload :0})\r\n\r\n}\r\n\r\nexport function setMessage(msg) {\r\n    return({type : 'SET_MESSAGE',payload:msg})\r\n}\r\nexport function resetNumber() {\r\n    return({type : 'RESET_NUM',payload:0})\r\n}\r\n\r\nexport default {getQuestions,passQuestion,restart,setMessage,resetNumber};","import axios from \"axios\"\r\nexport function getCategories() {\r\n\r\n    return(dispatch)=>{\r\n\r\n        axios.get('https://opentdb.com/api_category.php').then(response=>{\r\n\r\n            dispatch({type : 'CATEGORIES',payload : response.data.trivia_categories})\r\n\r\n        })\r\n\r\n    }\r\n\r\n}\r\nexport default getCategories;","export function setTimer(sn){\r\n\r\n    return({type : 'TIMER_SET',payload :sn})\r\n\r\n}\r\nexport function restartTime() {\r\n    return({type : 'RESET_TIME',payload:15})\r\n}\r\n\r\nexport default {setTimer,restartTime};","export function SetPoint(point){\r\n\r\n\r\n    return({type : 'WON',payload : point})\r\n\r\n}\r\n\r\nexport function resetPoint() {\r\n\r\n    return({type : 'RESET',payload : 0})\r\n\r\n}\r\n\r\nexport default {SetPoint,resetPoint};","import \"../CSS/App.css\";\r\nimport React, {Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {getQuestions, resetNumber, setMessage} from \"../Redux/Actions/QuestionActions\";\r\nimport {connect} from \"react-redux\";\r\nimport getCategories from \"../Redux/Actions/CategoryActions\";\r\nimport {setTimer} from \"../Redux/Actions/TimerActions\";\r\nimport {resetPoint} from \"../Redux/Actions/PointActions\";\r\nimport * as correct from \"../Animations/296-react-logo\";\r\nimport Lottie from \"react-lottie\";\r\n\r\nclass Home extends Component {\r\n    state = {\r\n\r\n        category : 9,\r\n        isStopped: false\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.categories();\r\n        this.props.message('QUESTION');\r\n        this.props.setTime(15);\r\n        this.props.setPoint();\r\n        this.stopAnimation();\r\n        this.props.getQuestions();\r\n        this.props.resetNum();\r\n\r\n\r\n    }\r\n\r\n    stopAnimation=()=>{\r\n\r\n        setTimeout(()=>{\r\n\r\n            this.setState({\r\n                isStopped:true\r\n            })\r\n\r\n        },3700)\r\n\r\n    }\r\n\r\n    changeHandler=(e)=>{\r\n        \r\n        this.props.getQuestions(e.target.value,this.state.category)\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const defaultOptions = {\r\n            loop: true,\r\n            autoplay: true,\r\n            animationData: correct.default,\r\n            rendererSettings: {\r\n                preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n        };\r\n        let gotCategories = this.props.rendered;\r\n        return (\r\n            <div className='home'>\r\n                <Lottie options={defaultOptions} height={360} width={360} isPaused={this.state.isStopped} />\r\n                    <h1 className='home-main'>TRIVIA GAME</h1>\r\n                    <select name=\"difficulty\" id=\"\" onChange={this.changeHandler}>\r\n                        <option value=\"easy\">Easy</option>\r\n                        <option value=\"medium\">Medium</option>\r\n                        <option value=\"hard\">Hard</option>\r\n                    </select>\r\n                    <select name=\"category\" id=\"\" value={this.state.category} onChange={(e) => this.setState({category: e.target.value})}>\r\n\r\n                        {\r\n                            gotCategories.map(category=>(\r\n                                <option key={category.id} value={category.id}>{category.name}</option>\r\n                            ))\r\n                        }\r\n\r\n                    </select>\r\n\r\n                    <Link className='start-btn' to={{pathname : '/questions', state : {questions: this.props.questions }}}>START</Link>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return{\r\n\r\n        questions: state.QuestionReducers,\r\n        rendered : state.CategoryReducer,\r\n\r\n    }\r\n\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\r\n    return{\r\n\r\n        getQuestions : bindActionCreators(getQuestions,dispatch),\r\n        categories : bindActionCreators(getCategories,dispatch),\r\n        message : bindActionCreators(setMessage,dispatch),\r\n        setTime : bindActionCreators(setTimer,dispatch),\r\n        setPoint : bindActionCreators(resetPoint,dispatch),\r\n        resetNum : bindActionCreators(resetNumber,dispatch)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);","export function useJoker(incorrect) {\r\n\r\n    console.log(incorrect);\r\n\r\n    return({type : 'JOKER',payload:incorrect})\r\n\r\n}\r\nexport function decreaseCounter() {\r\n\r\n    return({type : 'DECREASED',payload:0})\r\n\r\n}\r\nexport function resetCounter() {\r\n    return({type : 'INCREASED',payload : 1})\r\n}\r\nexport default {useJoker,decreaseCounter,resetCounter};","export function randomize(array) {\r\n\r\n    return({type : 'RANDOMIZED',payload:array})\r\n\r\n}\r\nexport default randomize;","import React, {PureComponent} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {passQuestion, setMessage} from \"../Redux/Actions/QuestionActions\";\r\nimport {resetPoint, SetPoint} from \"../Redux/Actions/PointActions\";\r\nimport {decreaseCounter, useJoker} from \"../Redux/Actions/JokerActions\";\r\nimport {setTimer,restartTime} from \"../Redux/Actions/TimerActions\";\r\nimport {Link, Redirect} from \"react-router-dom\"\r\nimport \"../CSS/App.css\"\r\nimport Lottie from \"react-lottie\";\r\nimport * as correct from \"../Animations/6640-times-up\";\r\nimport randomize from \"../Redux/Actions/RandomActions\";\r\n\r\nclass Questions extends PureComponent {\r\n\r\n    state ={\r\n\r\n        myTimer : null,\r\n        isPaused : false,\r\n        random : true,\r\n        newCorrect :this.props.location.state.questions[this.props.number].correct_answer,\r\n        newIncorrect : this.props.location.state.questions[this.props.number].incorrect_answers,\r\n        newTotal : ['1','2']\r\n\r\n}\r\n    componentDidMount() {\r\n\r\n        let total = this.state.newCorrect + \",\" + this.state.newIncorrect;\r\n        let news = total.split(',');\r\n        this.props.random(news);\r\n        this.timer();\r\n\r\n    }\r\n    stopAnimation=()=>{\r\n\r\n        setTimeout(()=>{\r\n\r\n            this.setState({\r\n                isStopped:true\r\n            })\r\n\r\n        },2500)\r\n\r\n    }\r\n\r\n    answer=(correct,answer)=>{\r\n\r\n        clearInterval(this.state.myTimer);\r\n\r\n        this.props.reset();\r\n\r\n        if(correct === answer){\r\n\r\n            this.props.setMessage('TRUE');\r\n            this.props.pass();\r\n            this.props.set(100*this.props.time);\r\n            this.props.history.push('/success',{time : this.props.time, round: 100*this.props.time })\r\n\r\n        }else{\r\n\r\n            this.props.setMessage('FALSE');\r\n            this.props.set(0*this.props.time);\r\n            this.props.history.push('/failed')\r\n\r\n        }\r\n\r\n    }\r\n    timer=()=>{\r\n\r\n     let time =15;\r\n\r\n     this.state.myTimer = setInterval(()=>{\r\n\r\n         time--;\r\n         this.props.setTime(time);\r\n         if(time===0){\r\n             clearInterval(this.state.myTimer)\r\n         }\r\n\r\n     },1000)\r\n\r\n    }\r\n\r\n    useJoker=(incorrect)=>{\r\n\r\n        let div = incorrect.length/2+1;\r\n        let total = this.state.newCorrect + \",\" +incorrect.splice(div);\r\n        let news = total.split(',');\r\n        this.props.random(news);\r\n        this.props.decrease();\r\n\r\n    }\r\n    timeIsUp=()=>{\r\n\r\n        this.props.resetPoint();\r\n\r\n        const defaultOptions = {\r\n            loop: true,\r\n            autoplay: true,\r\n            animationData: correct.default,\r\n            rendererSettings: {\r\n                preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n        };\r\n        this.props.setMessage('FAILED');\r\n        this.stopAnimation();\r\n       return(\r\n           <div className='time'>\r\n\r\n               <Lottie options={defaultOptions} height={360} width={360} isPaused={this.state.isPaused} />\r\n               <h1 className='over-main'>TIME IS UP</h1>\r\n               <h1 className='over-body'>TOTAL POINTS : {this.props.point}</h1>\r\n               <Link to='/' className='start-btn'>RESTART </Link>\r\n           </div>\r\n       )\r\n    }\r\n    render() {\r\n\r\n        if(this.props.location.state === undefined) return <Redirect to='/'/>\r\n        if(this.props.time === 0) return this.timeIsUp()\r\n        if(this.props.message === 'FAILED') return <Redirect to='/'/>\r\n        let current = this.props.location.state.questions[this.props.number];\r\n        let correct = current.correct_answer;\r\n\r\n    return (\r\n        <div className='questions'>\r\n                {\r\n                    <div className='questions-body'>\r\n                        <div className=\"question-text\">\r\n                            <h1 className='questions-main'>{current.question}</h1>\r\n                        </div>\r\n                        <ul className='question-items'>\r\n                            {\r\n                                this.props.randomla.map(question=>(\r\n                                    <li key={question} onClick={()=>{this.answer(correct,question)}}>{question}</li>\r\n                                ))\r\n                            }\r\n                        </ul>\r\n                        {this.props.counter === 1 ? <button className='joker-btn' onClick={()=>this.useJoker(this.state.newIncorrect)}>Joker</button> : null  }\r\n                    </div>\r\n                }\r\n        </div>\r\n    );\r\n}\r\n}\r\nfunction mapStateToProps(state) {\r\n\r\n    return{\r\n\r\n        number : state.NumberReducer,\r\n        point : state.PointReducer,\r\n        usedJoker: state.JokerReducer,\r\n        counter : state.CounterReducer,\r\n        time: state.TimerReducer,\r\n        message : state.MessageReducer,\r\n        jok : state.JokerReducer,\r\n        randomla : state.RandomReducer\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\r\n    return{\r\n        pass : bindActionCreators(passQuestion,dispatch),\r\n        set : bindActionCreators(SetPoint,dispatch),\r\n        joker : bindActionCreators(useJoker,dispatch),\r\n        decrease : bindActionCreators(decreaseCounter,dispatch),\r\n        setTime : bindActionCreators(setTimer,dispatch),\r\n        reset : bindActionCreators(restartTime,dispatch),\r\n        setMessage : bindActionCreators(setMessage,dispatch),\r\n        resetPoint : bindActionCreators(resetPoint,dispatch),\r\n        random : bindActionCreators(randomize,dispatch)\r\n\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Questions);","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {SetPoint} from \"../Redux/Actions/PointActions\";\r\nimport Lottie from \"react-lottie\";\r\nimport * as correct from \"../Animations/11774-correctanswer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {setMessage} from \"../Redux/Actions/QuestionActions\";\r\nclass CorrectAnswer extends Component {\r\n\r\n    state={\r\n\r\n        isPaused : false\r\n\r\n    }\r\n    componentDidMount() {\r\n\r\n        this.stopAnimation();\r\n    }\r\n\r\n    stopAnimation=()=>{\r\n\r\n        setTimeout(()=>{\r\n\r\n            this.setState({\r\n                isPaused:true\r\n            })\r\n\r\n        },1800)\r\n\r\n    }\r\n\r\n    back=()=>{\r\n\r\n       // this.props.message('QUESTION');\r\n        this.props.history.goBack();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.props.number ===10){\r\n\r\n            this.props.message('COMPLETED');\r\n\r\n        }\r\n        if(this.props.number === 10) return <Redirect to='/over'/>\r\n        if(this.props.msg !== 'TRUE') return <Redirect to='/'/>\r\n\r\n        const defaultOptions = {\r\n            loop: true,\r\n            autoplay: true,\r\n            animationData: correct.default,\r\n            rendererSettings: {\r\n                preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n        };\r\n\r\n        return (\r\n            <div className='correct'>\r\n                <Lottie className='animation' options={defaultOptions} height={240} width={240} isPaused={this.state.isPaused} />\r\n                <h1 className='true-main'>CORRECT!</h1>\r\n                <p className='true-body'>YOU EARNED {this.props.location.state.round} POINTS</p>\r\n                <p className='true-body'>TOTAL : {this.props.point}</p>\r\n                <button className='continue-btn' onClick={this.back}>GO ON !</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport function mapStateToProps(state) {\r\n\r\n    return{\r\n        point : state.PointReducer,\r\n        number : state.NumberReducer,\r\n        msg : state.MessageReducer\r\n    }\r\n\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\r\n    return{\r\n\r\n        set : bindActionCreators(SetPoint,dispatch),\r\n        message : bindActionCreators(setMessage,dispatch)\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(CorrectAnswer);","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {resetPoint} from \"../Redux/Actions/PointActions\";\r\nimport {restart, setMessage} from \"../Redux/Actions/QuestionActions\";\r\nimport {resetCounter} from \"../Redux/Actions/JokerActions\";\r\nimport Lottie from \"react-lottie\";\r\nimport * as correct from \"../Animations/13865-sign-for-error-flat-style\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass IncorrectAnswer extends Component {\r\n\r\n    state={\r\n\r\n        isPaused : false\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.stopAnimation();\r\n    }\r\n\r\n    stopAnimation=()=>{\r\n\r\n        setTimeout(()=>{\r\n\r\n            this.setState({\r\n                isPaused:true\r\n            })\r\n\r\n        },1850)\r\n\r\n    }\r\n\r\n    previous=()=>{\r\n\r\n        this.props.reset();\r\n        this.props.restart();\r\n        this.props.increase();\r\n        this.props.message('RESTART');\r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.props.msg !== 'FALSE') return <Redirect to='/'/>\r\n\r\n        const defaultOptions = {\r\n            loop: true,\r\n            autoplay: true,\r\n            animationData: correct.default,\r\n            rendererSettings: {\r\n                preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n        };\r\n\r\n        return (\r\n\r\n            <div className='incorrect'>\r\n\r\n                <Lottie options={defaultOptions} height={240} width={240} isPaused={this.state.isPaused} />\r\n                <h1 className='false-main'>GAME OVER</h1>\r\n                <p className='false-body'>POINTS : {this.props.point}</p>\r\n                <button className='restart-btn' onClick={this.previous}>RESTART</button>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n\r\n    return{\r\n\r\n        point : state.PointReducer,\r\n        msg : state.MessageReducer\r\n\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\r\n    return{\r\n        reset :bindActionCreators(resetPoint,dispatch),\r\n        restart : bindActionCreators(restart,dispatch),\r\n        increase : bindActionCreators(resetCounter,dispatch),\r\n        message :bindActionCreators(setMessage,dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(IncorrectAnswer);","import React, {Component} from 'react';\r\nimport \"../CSS/App.css\"\r\nimport {connect} from \"react-redux\";\r\n\r\nclass Navi extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className='navi'>\r\n                <div className=\"question\">\r\n                 Questions :   {this.props.message !== 'COMPLETED' ? this.props.number+1 : 10}/10\r\n                </div>\r\n                <div className=\"point\">\r\n                    {this.props.point} Point\r\n                </div>\r\n                <div className=\"time\">\r\n                    Remaining Time : {this.props.time}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n\r\n    return{\r\n        time : state.TimerReducer,\r\n        number : state.NumberReducer,\r\n        point: state.PointReducer,\r\n        message : state.MessageReducer\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Navi);","import React, {Component} from 'react';\r\nimport Lottie from \"react-lottie\";\r\nimport * as over from \"../Animations/over\";\r\nimport {connect} from \"react-redux\";\r\nimport {bindActionCreators} from \"redux\";\r\nimport {resetPoint} from \"../Redux/Actions/PointActions\";\r\nimport {restart, setMessage} from \"../Redux/Actions/QuestionActions\";\r\nimport {resetCounter} from \"../Redux/Actions/JokerActions\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nclass GameFinished extends Component {\r\n\r\n    restart=()=>{\r\n\r\n        this.props.reset();\r\n        this.props.restart();\r\n        this.props.increase();\r\n        this.props.message('RESTART');\r\n        this.props.history.push('/');\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        if(this.props.msg !== 'COMPLETED') return <Redirect to='/'/>\r\n\r\n        const defaultOptions = {\r\n            loop: true,\r\n            autoplay: true,\r\n            animationData: over.default,\r\n            rendererSettings: {\r\n                preserveAspectRatio: 'xMidYMid slice'\r\n            }\r\n        };\r\n        return (\r\n            <div className='game-finish'>\r\n                <Lottie options={defaultOptions} height={360} width={360}/>\r\n                <h1 className='over-main'>CONGRATS !</h1>\r\n                <p className='over-body'>GAME IS COMPLETED</p>\r\n                <p className='over-body'>TOTAL POINTS : {this.props.point} </p>\r\n                <button className='start-btn' onClick={this.restart}>RESTART</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n\r\n    return{\r\n\r\n        point : state.PointReducer,\r\n        msg : state.MessageReducer\r\n\r\n    }\r\n\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\r\n    return{\r\n        reset :bindActionCreators(resetPoint,dispatch),\r\n        restart : bindActionCreators(restart,dispatch),\r\n        increase : bindActionCreators(resetCounter,dispatch),\r\n        message :bindActionCreators(setMessage,dispatch)\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(GameFinished);","import React from 'react';\nimport './CSS/App.css';\nimport {Switch,Route} from \"react-router-dom\";\nimport Home from \"./Components/Home\";\nimport Questions from \"./Components/Questions\";\nimport CorrectAnswer from \"./Components/CorrectAnswer\";\nimport IncorrectAnswer from \"./Components/IncorrectAnswer\";\nimport Navi from \"./Components/Navi\";\nimport GameFinished from \"./Components/GameFinished\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n     <Navi/>\n\n            <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions' component={Questions}/>\n                <Route exact path='/failed' component={IncorrectAnswer}/>\n                <Route exact path='/success' component={CorrectAnswer} />\n                <Route exact path='/over' component={GameFinished}/>\n\n            </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","export default {\r\n\r\n    questions: [\r\n\r\n        {category: \"General Knowledge\", type: \"multiple\", difficulty: \"easy\", question: \"What was the name of the WWF professional wrestling tag team made up of the wrestlers Ax and Smash?\", correct_answer: \"Demolition\"}\r\n\r\n    ],\r\n    number : 0,\r\n    point : 0,\r\n    timer : 15,\r\n    eliminated : [],\r\n    jokerCount : 1,\r\n    categories : [{id: 1, name: \"-\"}],\r\n    randomized : [],\r\n    message : ''\r\n}","\r\nimport CentralStore from \"./CentralStore\";\r\n\r\nexport function QuestionReducers(state = CentralStore.questions,action){\r\n\r\n    if(action.type === 'QUESTIONS'){\r\n\r\n        return action.payload;\r\n\r\n    }else {\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default QuestionReducers;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function NumberReducer(state = CentralStore.number,action) {\r\n\r\n    let newState;\r\n\r\n    if(action.type === 'PASSED'){\r\n\r\n        return (newState = state+action.payload);\r\n\r\n    }else if(action.type === 'RESTART'){\r\n\r\n        return action.payload;\r\n\r\n    }else if(action.type === 'RESET_NUM'){\r\n\r\n        return action.payload;\r\n\r\n    }else{\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default NumberReducer;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function PointReducer(state=CentralStore.point,action) {\r\n\r\n    let newState;\r\n\r\n    if(action.type === 'WON'){\r\n\r\n        return(newState = action.payload+state)\r\n\r\n    }else if(action.type === 'RESET'){\r\n\r\n        return  action.payload;\r\n\r\n    }else {\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default PointReducer;","import CentralStore from \"./CentralStore\";\r\nexport function JokerReducer(state=CentralStore.eliminated,action) {\r\n\r\n    let newState;\r\n\r\n    if(action.type === 'JOKER'){\r\n\r\n        return(newState=action.payload.splice(0,2))\r\n\r\n        console.log(newState);\r\n\r\n    }else{\r\n\r\n        return state;\r\n    }\r\n\r\n}\r\n\r\nexport default JokerReducer;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function CounterReducer(state=CentralStore.jokerCount,action) {\r\n\r\n    if(action.type === 'DECREASED' || action.type === 'INCREASED'){\r\n\r\n        return action.payload\r\n\r\n    }else{\r\n\r\n        return state\r\n\r\n    }\r\n\r\n}\r\nexport default CounterReducer;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function CategoryReducer(state=CentralStore.categories,action) {\r\n\r\n    if(action.type === 'CATEGORIES'){\r\n\r\n        return action.payload;\r\n\r\n    }else{\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\nexport default CategoryReducer;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function TimerReducer(state=CentralStore.timer,action) {\r\n\r\n    if(action.type === 'TIMER_SET'){\r\n\r\n        return action.payload;\r\n\r\n    }else if(action.type === 'RESET_TIME'){\r\n\r\n        return action.payload;\r\n\r\n    }else{\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\nexport default TimerReducer;","import CentralStore from \"./CentralStore\";\r\n\r\nexport function MessageReducer(state=CentralStore.message,action) {\r\n\r\n    if(action.type === 'SET_MESSAGE'){\r\n\r\n        return action.payload;\r\n\r\n    }else{\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default MessageReducer;"," import CentralStore from \"./CentralStore\";\r\n\r\nexport function RandomReducer(state= CentralStore.randomized,action) {\r\n\r\n    let newState;\r\n\r\n    if(action.type === 'RANDOMIZED'){\r\n\r\n        return (newState = action.payload.sort(function(a, b){return 0.5 - Math.random()}))\r\n\r\n    }else {\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default RandomReducer;","import {combineReducers} from \"redux\";\r\nimport QuestionReducers from \"./QuestionReducers\";\r\nimport NumberReducer from \"./NumberReducer\";\r\nimport PointReducer from \"./PointReducer\";\r\nimport JokerReducer from \"./JokerReducer\";\r\nimport CounterReducer from \"./CounterReducer\";\r\nimport CategoryReducer from \"./CategoryReducer\";\r\nimport TimerReducer from \"./TimeReducer\";\r\nimport MessageReducer from \"./MessageReducer\";\r\nimport RandomReducer from \"./RandomReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n    QuestionReducers,\r\n    NumberReducer,\r\n    PointReducer,\r\n    JokerReducer,\r\n    CounterReducer,\r\n    CategoryReducer,\r\n    TimerReducer,\r\n    MessageReducer,\r\n    RandomReducer\r\n\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./Redux/Reducers/rootReducer\";\nimport {createStore,applyMiddleware,compose} from \"redux\";\nimport {Provider} from \"react-redux\"\n\nconst store = createStore(rootReducer,compose(applyMiddleware(thunk)))\n\nReactDOM.render( <BrowserRouter> <Provider store={store}> <App /> </Provider>  </BrowserRouter> , document.getElementById('root'));\n\n"],"sourceRoot":""}